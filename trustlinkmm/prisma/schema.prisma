generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model department {
  id               Int      @id @default(autoincrement())
  departmentName   String   @unique(map: "Department_departmentName_key") @db.VarChar(64)
  createdDate      DateTime @default(now())
  lastModifiedDate DateTime
}

model message {
  id                             Int      @id @default(autoincrement())
  message                        String   @db.Text
  senderId                       Int
  recipientId                    Int
  emittedDate                    DateTime @default(now())
  attatchment                    String?  @db.VarChar(255)
  user_message_recipientIdTouser user     @relation("message_recipientIdTouser", fields: [recipientId], references: [id], onDelete: Cascade, map: "Message_recipientId_fkey")
  user_message_senderIdTouser    user     @relation("message_senderIdTouser", fields: [senderId], references: [id], onDelete: Cascade, map: "Message_senderId_fkey")

  @@index([recipientId], map: "Message_recipientId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model ticket {
  id               Int             @id @default(autoincrement())
  description      String          @db.Text
  title            String          @unique(map: "Ticket_title_key") @db.VarChar(64)
  submittedDate    DateTime        @default(now())
  categoryId       Int
  departmentId     Int
  startDate        DateTime?
  lastModifiedDate DateTime?       @updatedAt
  endDate          DateTime?
  issuerId         Int?
  assigneeId       Int?
  status           ticket_status   @default(Open)
  priority         ticket_priority @default(Low)
  email            String?          @db.Text
  firstName        String?          @db.Text
  lastName         String?          @db.Text

  @@index([assigneeId], map: "Ticket_assigneeId_fkey")
  @@index([categoryId], map: "Ticket_categoryId_fkey")
  @@index([departmentId], map: "Ticket_departmentId_fkey")
  @@index([issuerId], map: "Ticket_issuerId_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ticket_process {
  id          Int                   @id @default(autoincrement())
  ticket_id   Int?
  assign_to   Int?
  description String?               @db.VarChar(255)
  status      ticket_process_status
  created_at  DateTime?             @default(now()) @db.Timestamp(0)
  created_by  Int?
}

model ticketCategory {
  id               Int       @id @default(autoincrement())
  categoryName     String    @unique(map: "TicketCategory_categoryName_key") @db.VarChar(64)
  createdDate      DateTime  @default(now())
  lastModifiedDate DateTime?
}

model user {
  id                                Int           @id @default(autoincrement())
  firstName                         String        @db.VarChar(64)
  lastName                          String        @db.VarChar(64)
  email                             String        @unique(map: "User_email_key") @db.VarChar(64)
  username                          String        @unique(map: "User_username_key") @db.VarChar(255)
  password                          String        @db.VarChar(64)
  phoneNo                           String        @db.VarChar(15)
  userType                          user_userType @default(User)
  userToken                         String?       @unique(map: "User_userToken_key") @db.VarChar(255)
  emailVerified                     Boolean       @default(false)
  createdDate                       DateTime      @default(now())
  lastModifiedDate                  DateTime?
  userAvatar                        String?       @db.VarChar(255)
  message_message_recipientIdTouser message[]     @relation("message_recipientIdTouser")
  message_message_senderIdTouser    message[]     @relation("message_senderIdTouser")
}

enum user_userType {
  User
  Employee
  Adminstrator
}

enum ticket_status {
  Pending
  Open
  In_Progress
  Closed
  Assigned
}

enum ticket_priority {
  Critical
  Moderate
  Medium
  Low
}

enum ticket_process_status {
  Pending
  Open
  In_Progress
  Closed
  Assigned
}
